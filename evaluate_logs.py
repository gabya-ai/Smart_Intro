# -*- coding: utf-8 -*-
"""evaluate_logs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1952LowZsDWg0FcDzfvch2xu0ZKJ-8BfH
"""

import json
from pathlib import Path
from collections import Counter

log_path = Path("logs.txt")

if not log_path.exists():
    print("No logs.txt found. Run the app and generate a few letters first.")
    exit()

# Load JSON lines
records = []
for line in log_path.read_text().splitlines():
    try:
        obj = json.loads(line)
        # give old records a default event type
        if "event" not in obj:
            obj["event"] = "unknown"
        records.append(obj)
    except json.JSONDecodeError:
        pass

print(f"✅ Loaded {len(records)} total records")

# Split by event type
events = Counter(r["event"] for r in records)
print("\nEvent counts:")
for k, v in events.items():
    print(f"  {k:<18} {v}")

# --- Compute feedback summary ---
feedback = [r for r in records if r["event"] == "feedback"]
if feedback:
    ratings = Counter(r["rating"] for r in feedback)
    ups = ratings.get("up", 0)
    downs = ratings.get("down", 0)
    total_fb = ups + downs
    print("\nFeedback summary:")
    print(f"  👍 {ups}")
    print(f"  👎 {downs}")
    if total_fb:
        print(f"  Approval rate: {ups / total_fb * 100:.1f}%")

# --- Average lengths for generations ---
gens = [r for r in records if r["event"] == "generation"]
if gens:
    avg_prompt = sum(len(r["prompt_snippet"]) for r in gens) / len(gens)
    avg_resp = sum(len(r["response_snippet"]) for r in gens) / len(gens)
    print("\nAverage lengths (generation events):")
    print(f"  Prompt snippet:  {avg_prompt:.1f}")
    print(f"  Response snippet: {avg_resp:.1f}")

print("\nSample last record:")
print(json.dumps(records[-1], indent=2)[:800])