# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jtil55wJ1XegMHPninAiEZCmBTpmN7aI
"""

import os
import streamlit as st
from dotenv import load_dotenv
from datetime import datetime
import json
# Vertex AI (Gemini) SDK
import vertexai
from vertexai.generative_models import GenerativeModel

from prompts import BASE_PROMPT

# Load .env if present
load_dotenv()

PROJECT_ID = os.getenv("GOOGLE_CLOUD_PROJECT")
REGION = os.getenv("GOOGLE_CLOUD_REGION", "us-central1")

# Initialize Vertex AI
vertexai.init(project=PROJECT_ID, location=REGION)
model = GenerativeModel("gemini-2.5-flash")  # you can switch to -pro later

st.set_page_config(page_title="Smart Cover Letter (P0)", page_icon="‚úçÔ∏è")

st.title("‚úçÔ∏è Smart Cover Letter (P0)")
st.caption("Paste your resume and the job description. I‚Äôll draft a tailored letter.")

with st.form("inputs"):
    resume = st.text_area("Your Resume (paste text)", height=220, placeholder="Paste your resume here‚Ä¶")
    jd = st.text_area("Job Description (paste text)", height=220, placeholder="Paste the job description here‚Ä¶")

    col1, col2 = st.columns(2)
    with col1:
        msg_or_letter = st.selectbox("Format", ["Short message (recruiter/LI DM)", "Formal cover letter"])
    with col2:
        length = st.selectbox("Length", ["1 paragraph", "2‚Äì3 paragraphs"])

    highlights = st.text_input(
        "Any specific highlights to emphasize? (comma-separated)",
        placeholder="e.g., leadership, ML ops, stakeholder comms"
    )

    submitted = st.form_submit_button("Generate Letter", use_container_width=True)

if submitted:
    if not resume.strip() or not jd.strip():
        st.warning("Please paste both your resume and the job description.")
    else:
        format_style = "short message" if "Short message" in msg_or_letter else "formal cover letter"
        length_style = length

        prompt = BASE_PROMPT.format(
            length_style=length_style,
            format_style=format_style,
            highlights=highlights if highlights.strip() else "the most relevant strengths",
            resume=resume,
            jd=jd
        )

        with st.spinner("Drafting‚Ä¶"):
            try:
                resp = model.generate_content(prompt)
                text = resp.candidates[0].content.parts[0].text if resp and resp.candidates else "(No output)"
                st.subheader("Draft")
                st.write(text)
                log_entry = {
                    "timestamp": datetime.now().isoformat(),
                    "prompt_snippet": prompt[:500],  # only first 500 chars for readability
                    "response_snippet": text[:500],
                    "project_id": PROJECT_ID
                }
                with open("logs.txt", "a") as f:
                    f.write(json.dumps(log_entry) + "\n")
                st.info("Log saved locally (logs.txt)")
                st.divider()
                st.caption("Feedback (P1 will log this to Firestore)")
                fb_cols = st.columns(3)
                with fb_cols[0]:
                    st.button("üëç Looks good")
                with fb_cols[1]:
                    st.button("üëé Needs work")
                with fb_cols[2]:
                    st.button("Save my final version (coming soon)")

            except Exception as e:
                st.error(f"Generation failed: {e}")

st.sidebar.header("Settings")
st.sidebar.write(f"Project: **{PROJECT_ID or '(unset)'}**")
st.sidebar.write(f"Region: **{REGION}**")
st.sidebar.info("Tip: for better quality, later switch to `gemini-2.5-pro`.")